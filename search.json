[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Boyi Guo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/intro_to_tpSVG.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to tpSVG","text":"latest development version can installed GitHub following NOTE: working finalizing package submission Bioconductor.","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"boyiguo1/tpSVG\")"},{"path":"/articles/intro_to_tpSVG.html","id":"analyze-gene-expression-counts-using-poisson-distribtuion","dir":"Articles","previous_headings":"Installation","what":"Analyze gene expression counts using Poisson distribtuion","title":"Introduction to tpSVG","text":"","code":"library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #>  #> Attaching package: 'IRanges' #> The following object is masked from 'package:nlme': #>  #>     collapse #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians library(STexampleData) #> Loading required package: ExperimentHub #> Loading required package: AnnotationHub #> Loading required package: BiocFileCache #> Loading required package: dbplyr #>  #> Attaching package: 'AnnotationHub' #> The following object is masked from 'package:Biobase': #>  #>     cache  spe <- Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> loading from cache spe <- spe[, colData(spe)$in_tissue == 1]  # Calcualte library size spe$total <- counts(spe) |> colSums()  # Smaller set of genes idx <- which(   rowData(spe)$gene_name %in% c(\"MOBP\", \"PCP4\", \"SNAP25\",                                 \"HBB\", \"IGKC\", \"NPY\") ) spe <- spe[idx, ]  set.seed(1) spe_poisson  <- tpSVG(   spe,   family = poisson,   assay_name = \"counts\",   offset = log(spe$total)   # Natural log library size )   rowData(spe_poisson) #> DataFrame with 6 rows and 6 columns #>                         gene_id   gene_name    feature_type test_stat     raw_p #>                     <character> <character>     <character> <numeric> <numeric> #> ENSG00000211592 ENSG00000211592        IGKC Gene Expression   3447.12         0 #> ENSG00000168314 ENSG00000168314        MOBP Gene Expression   7143.34         0 #> ENSG00000122585 ENSG00000122585         NPY Gene Expression   3596.18         0 #> ENSG00000244734 ENSG00000244734         HBB Gene Expression   1536.56         0 #> ENSG00000132639 ENSG00000132639      SNAP25 Gene Expression   3529.46         0 #> ENSG00000183036 ENSG00000183036        PCP4 Gene Expression   1381.63         0 #>                   runtime #>                 <numeric> #> ENSG00000211592     0.354 #> ENSG00000168314     0.288 #> ENSG00000122585     0.288 #> ENSG00000244734     0.282 #> ENSG00000132639     0.290 #> ENSG00000183036     0.272"},{"path":"/articles/intro_to_tpSVG.html","id":"gaussian-model-for-log-transformed-normalized-data","dir":"Articles","previous_headings":"Installation","what":"Gaussian model for log-transformed normalized data","title":"Introduction to tpSVG","text":"","code":"spe_gauss <- tpSVG(   spe,    family = gaussian(),   assay_name = \"logcounts\",   offset = NULL   # Natural log library size )"},{"path":"/articles/intro_to_tpSVG.html","id":"covariates-model","dir":"Articles","previous_headings":"Installation > Gaussian model for log-transformed normalized data","what":"Covariates Model","title":"Introduction to tpSVG","text":"","code":"#TODO: To implement this.  # Check missing data idx_complete_case <- complete.cases(spe$ground_truth) # If multiple covariates # idx_complete_case <- complete.cases(spe$ground_truth, spe$cell_count)  spe <- spe[, idx_complete_case]    # Create a design matrix x <- spe$ground_truth   # Remove intercept term  spe_poisson_cov  <- tpSVG(   spe,   X = x,    family = poisson,   assay_name = \"counts\",   offset = log(spe$total)   # Natural log library size )"},{"path":"/articles/supported_data_structure.html","id":"image-based-srt-in-spatialexperiment-e-g--spatialfeatureexperiment","dir":"Articles","previous_headings":"","what":"image-based SRT in SpatialExperiment (e.g. SpatialFeatureExperiment)","title":"Working with different data objects","text":"tpSVG can also used model image-based SRT data. use seqFISH data Lohoff Ghazanfar et al. (2020) demonstrate tpSVG. Specifically, use curated example data STexampleData package. information, please see vignettes STexampleData example data set contains 351 genes 11026 genes. make demonstration computationally feasible, -size number genes 3. average computation times 11026 cells roughly 2 minutes.","code":"library(STexampleData) spe <- seqFISH_mouseEmbryo()  spe #> class: SpatialExperiment  #> dim: 351 11026  #> metadata(0): #> assays(2): counts molecules #> rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 #> rowData names(1): gene_name #> colnames(11026): embryo1_Pos0_cell10_z2 embryo1_Pos0_cell100_z2 ... #>   embryo1_Pos28_cell97_z2 embryo1_Pos28_cell98_z2 #> colData names(14): cell_id embryo ... segmentation_vertices sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : x y #> imgData names(0): # Calculate \"library size\" spe$total <- counts(spe) |> colSums()  # Down-size genes idx_gene <- which(   rowData(spe)$gene_name %in%     c(\"Sox2\", \"Hand1\", \"Gata5\")   )  library(tpSVG)  # Poisson model tp_spe <- tpSVG(   input = spe[idx_gene,],   family = poisson(),   offset = log(spe$total),   assay_name = \"counts\")  rowData(tp_spe) #> DataFrame with 3 rows and 4 columns #>         gene_name test_stat     raw_p   runtime #>       <character> <numeric> <numeric> <numeric> #> Gata5       Gata5   8024.84         0     0.933 #> Hand1       Hand1   8393.34         0     0.911 #> Sox2         Sox2   9588.51         0     0.901"},{"path":"/articles/supported_data_structure.html","id":"session-information","dir":"Articles","previous_headings":"image-based SRT in SpatialExperiment (e.g. SpatialFeatureExperiment)","what":"Session Information","title":"Working with different data objects","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.2 (2023-10-31) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-12-28 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package                * version   date (UTC) lib source #>  abind                    1.4-5     2016-07-21 [1] RSPM (R 4.3.0) #>  AnnotationDbi            1.64.1    2023-11-03 [1] Bioconductor #>  AnnotationHub          * 3.10.0    2023-10-24 [1] Bioconductor #>  Biobase                * 2.62.0    2023-10-24 [1] Bioconductor #>  BiocFileCache          * 2.10.1    2023-10-26 [1] Bioconductor #>  BiocGenerics           * 0.48.1    2023-11-01 [1] Bioconductor #>  BiocManager              1.30.22   2023-08-08 [2] CRAN (R 4.3.2) #>  BiocParallel             1.36.0    2023-10-24 [1] Bioconductor #>  BiocVersion              3.18.1    2023-11-15 [2] Bioconductor #>  Biostrings               2.70.1    2023-10-25 [1] Bioconductor #>  bit                      4.0.5     2022-11-15 [1] RSPM (R 4.3.0) #>  bit64                    4.0.5     2020-08-30 [1] RSPM (R 4.3.0) #>  bitops                   1.0-7     2021-04-24 [1] RSPM (R 4.3.0) #>  blob                     1.2.4     2023-03-17 [1] RSPM (R 4.3.0) #>  bslib                    0.6.1     2023-11-28 [2] RSPM (R 4.3.0) #>  BumpyMatrix            * 1.10.0    2023-10-24 [1] Bioconductor #>  cachem                   1.0.8     2023-05-01 [2] RSPM (R 4.3.0) #>  cli                      3.6.2     2023-12-11 [2] RSPM (R 4.3.0) #>  codetools                0.2-19    2023-02-01 [3] CRAN (R 4.3.2) #>  crayon                   1.5.2     2022-09-29 [2] RSPM (R 4.3.0) #>  curl                     5.2.0     2023-12-08 [2] RSPM (R 4.3.0) #>  DBI                      1.2.0     2023-12-21 [1] RSPM (R 4.3.0) #>  dbplyr                 * 2.4.0     2023-10-26 [1] RSPM (R 4.3.0) #>  DelayedArray             0.28.0    2023-10-24 [1] Bioconductor #>  desc                     1.4.3     2023-12-10 [2] RSPM (R 4.3.0) #>  digest                   0.6.33    2023-07-07 [2] RSPM (R 4.3.0) #>  dplyr                    1.1.4     2023-11-17 [1] RSPM (R 4.3.0) #>  ellipsis                 0.3.2     2021-04-29 [2] RSPM (R 4.3.0) #>  evaluate                 0.23      2023-11-01 [2] RSPM (R 4.3.0) #>  ExperimentHub          * 2.10.0    2023-10-24 [1] Bioconductor #>  fansi                    1.0.6     2023-12-08 [2] RSPM (R 4.3.0) #>  fastmap                  1.1.1     2023-02-24 [2] RSPM (R 4.3.0) #>  filelock                 1.0.3     2023-12-11 [1] RSPM (R 4.3.0) #>  fs                       1.6.3     2023-07-20 [2] RSPM (R 4.3.0) #>  generics                 0.1.3     2022-07-05 [1] RSPM (R 4.3.0) #>  GenomeInfoDb           * 1.38.4    2023-12-26 [1] Bioconductor 3.18 (R 4.3.2) #>  GenomeInfoDbData         1.2.11    2023-11-15 [1] Bioconductor #>  GenomicRanges          * 1.54.1    2023-10-29 [1] Bioconductor #>  glue                     1.6.2     2022-02-24 [2] RSPM (R 4.3.0) #>  htmltools                0.5.7     2023-11-03 [2] RSPM (R 4.3.0) #>  httpuv                   1.6.13    2023-12-06 [2] RSPM (R 4.3.0) #>  httr                     1.4.7     2023-08-15 [2] RSPM (R 4.3.0) #>  interactiveDisplayBase   1.40.0    2023-10-24 [1] Bioconductor #>  IRanges                * 2.36.0    2023-10-24 [1] Bioconductor #>  jquerylib                0.1.4     2021-04-26 [2] RSPM (R 4.3.0) #>  jsonlite                 1.8.8     2023-12-04 [2] RSPM (R 4.3.0) #>  KEGGREST                 1.42.0    2023-10-24 [1] Bioconductor #>  knitr                    1.45      2023-10-30 [2] RSPM (R 4.3.0) #>  later                    1.3.2     2023-12-06 [2] RSPM (R 4.3.0) #>  lattice                  0.22-5    2023-10-24 [3] RSPM (R 4.3.0) #>  lifecycle                1.0.4     2023-11-07 [2] RSPM (R 4.3.0) #>  magick                   2.8.2     2023-12-20 [1] RSPM (R 4.3.0) #>  magrittr                 2.0.3     2022-03-30 [2] RSPM (R 4.3.0) #>  Matrix                   1.6-4     2023-11-30 [3] RSPM (R 4.3.0) #>  MatrixGenerics         * 1.14.0    2023-10-24 [1] Bioconductor #>  matrixStats            * 1.2.0     2023-12-11 [1] RSPM (R 4.3.0) #>  memoise                  2.0.1     2021-11-26 [2] RSPM (R 4.3.0) #>  mgcv                   * 1.9-1     2023-12-21 [3] RSPM (R 4.3.0) #>  mime                     0.12      2021-09-28 [2] RSPM (R 4.3.0) #>  nlme                   * 3.1-164   2023-11-27 [3] RSPM (R 4.3.0) #>  pillar                   1.9.0     2023-03-22 [2] RSPM (R 4.3.0) #>  pkgconfig                2.0.3     2019-09-22 [2] RSPM (R 4.3.0) #>  pkgdown                  2.0.7     2022-12-14 [2] RSPM (R 4.3.0) #>  png                      0.1-8     2022-11-29 [1] RSPM (R 4.3.0) #>  promises                 1.2.1     2023-08-10 [2] RSPM (R 4.3.0) #>  purrr                    1.0.2     2023-08-10 [2] RSPM (R 4.3.0) #>  R6                       2.5.1     2021-08-19 [2] RSPM (R 4.3.0) #>  ragg                     1.2.7     2023-12-11 [2] RSPM (R 4.3.0) #>  rappdirs                 0.3.3     2021-01-31 [2] RSPM (R 4.3.0) #>  Rcpp                     1.0.11    2023-07-06 [2] RSPM (R 4.3.0) #>  RCurl                    1.98-1.13 2023-11-02 [1] RSPM (R 4.3.0) #>  rjson                    0.2.21    2022-01-09 [1] RSPM (R 4.3.0) #>  rlang                    1.1.2     2023-11-04 [2] RSPM (R 4.3.0) #>  rmarkdown                2.25      2023-09-18 [2] RSPM (R 4.3.0) #>  RSQLite                  2.3.4     2023-12-08 [1] RSPM (R 4.3.0) #>  S4Arrays                 1.2.0     2023-10-24 [1] Bioconductor #>  S4Vectors              * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2) #>  sass                     0.4.8     2023-12-06 [2] RSPM (R 4.3.0) #>  sessioninfo              1.2.2     2021-12-06 [2] RSPM (R 4.3.0) #>  shiny                    1.8.0     2023-11-17 [2] RSPM (R 4.3.0) #>  SingleCellExperiment   * 1.24.0    2023-10-24 [1] Bioconductor #>  SparseArray              1.2.3     2023-12-25 [1] Bioconductor 3.18 (R 4.3.2) #>  SpatialExperiment      * 1.12.0    2023-10-24 [1] Bioconductor #>  STexampleData          * 1.10.0    2023-10-26 [1] Bioconductor #>  stringi                  1.8.3     2023-12-11 [2] RSPM (R 4.3.0) #>  stringr                  1.5.1     2023-11-14 [2] RSPM (R 4.3.0) #>  SummarizedExperiment   * 1.32.0    2023-10-24 [1] Bioconductor #>  systemfonts              1.0.5     2023-10-09 [2] RSPM (R 4.3.0) #>  textshaping              0.3.7     2023-10-09 [2] RSPM (R 4.3.0) #>  tibble                   3.2.1     2023-03-20 [2] RSPM (R 4.3.0) #>  tidyselect               1.2.0     2022-10-10 [1] RSPM (R 4.3.0) #>  tpSVG                  * 0.99.1    2023-12-28 [1] Bioconductor #>  utf8                     1.2.4     2023-10-22 [2] RSPM (R 4.3.0) #>  vctrs                    0.6.5     2023-12-01 [2] RSPM (R 4.3.0) #>  withr                    2.5.2     2023-10-30 [2] RSPM (R 4.3.0) #>  xfun                     0.41      2023-11-01 [2] RSPM (R 4.3.0) #>  xtable                   1.8-4     2019-04-21 [2] RSPM (R 4.3.0) #>  XVector                  0.42.0    2023-10-24 [1] Bioconductor #>  yaml                     2.3.8     2023-12-11 [2] RSPM (R 4.3.0) #>  zlibbioc                 1.48.0    2023-10-24 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Boyi Guo. Author, maintainer. Lukas M. Weber. Contributor. Stephanie C. Hicks. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guo B, Weber LM, Hicks SC (2023). “tpSVG.” R package version 0.99.1. https://boyi-guo.com/tpSVG/.","code":"@Misc{,   title = {tpSVG},   author = {Boyi Guo and Lukas M. Weber and Stephanie C. Hicks},   note = {R package version 0.99.1. https://boyi-guo.com/tpSVG/},   year = {2023},   month = {12}, }"},{"path":"/index.html","id":"tpsvg-","dir":"","previous_headings":"","what":"Thin plate models to detect spatially variable genes ","title":"Thin plate models to detect spatially variable genes ","text":"goal tpSVG detect visualize spatial variation gene expression spatially resolved transcriptomics data analysis. Specifically, tpSVG introduces family count-based models, generalizable parametric assumptions Poisson distribution negative binomial distribution. addition, comparing currently available count-based model spatially resolved data analysis, tpSVG models improves computational time, hence greatly improves applicability count-based models SRT data analysis.","code":""},{"path":[]},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Thin plate models to detect spatially variable genes ","text":"can install development version tpSVG GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"boyiguo1/tpSVG\")"},{"path":"/index.html","id":"bioconductor-pending","dir":"","previous_headings":"Installation","what":"Bioconductor (pending)","title":"Thin plate models to detect spatially variable genes ","text":"package currently submitted Bioconductor review. package accepted Bioconductor, can install latest release version tpSVG Bioconductor via following code. Additional details shown Bioconductor page. latest development version can also installed devel version Bioconductor GitHub following","code":"# NOTE: The package is under-review with bioconductor. #       The following code section will work once the package is accepted.  if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"tpSVG\") BiocManager::install(version='devel')"},{"path":"/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Thin plate models to detect spatially variable genes ","text":"Please find end--end tutorial https://boyi-guo.com/tpSVG/articles/intro_to_tpSVG.html.","code":""},{"path":"/index.html","id":"frequently-asked-questions","dir":"","previous_headings":"","what":"Frequently asked questions","title":"Thin plate models to detect spatially variable genes ","text":"Implementation Questions data structures tpSVG current supports? tpSVG v0.99.1, data structure tpSVG supports includes SpatialExperiments (packages extending SpatialExperiments, e.g. SpatialFeatureExperiments) data.frame. Please find example via supported_data_structure. Due limited resources, regret won’t provides direct accessibility pipelines, e.g. suerat. types spatially-resolved transcriptomics (SRT) data tpSVG supports? sequenced-based SRT image-based SRT data supported tpSVG. details, please refer vignette [supported_data_structure]](https://boyi-guo.com/tpSVG/articles/supported_data_structure.html#image-based-srt--spatialexperiment-e-g--spatialfeatureexperiment). Can use scale factor offset count-model? Yes, just remember take log offset term. vignettes, offset model default library size, .e. total number molecular spot/cell, count models compatible definition scale factor theory. Theoretical Questions difference modeling log transformed data count data? Count data natural form gene expression data collected quantified. log-transformation providess shortcuts model (normalized) count data using well-studied Gaussian distribution, distorts lowly expressed gene causes analytic biases.","code":""},{"path":"/reference/tpSVG.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"Thin Plate Spline Model Detect Spatially Variable Genes","code":""},{"path":"/reference/tpSVG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"","code":"tpSVG(   input,   spatial_coords = NULL,   X = NULL,   family = gaussian(),   offset = NULL,   weights = NULL,   assay_name = \"logcounts\",   n_threads = 1,   BPPARAM = NULL,   verbose = FALSE,   ... )"},{"path":"/reference/tpSVG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"input SpatialExperiment numeric matrix: Input data, can either SpatialExperiment object numeric matrix values. SpatialExperiment object, assumed assay slot containing either logcounts (e.g. scran package) deviance residuals (e.g. scry package), spatialCoords slot containing spatial coordinates measurements. numeric matrix, values assumed already normalized transformed (e.g. logcounts), formatted rows = genes columns = spots, separate numeric matrix spatial coordinates must also provided spatial_coords argument. spatial_coords numeric matrix: Matrix containing columns spatial coordinates, formatted rows = spots. must provided input provied numeric matrix values, ignored input provided SpatialExperiment object. Default = NULL. X numeric matrix: Optional design matrix containing columns covariates per spatial location, e.g. known spatial domains. Number rows must match number spatial locations. Default = NULL, fits intercept-model. family TODO: fixme offset TODO: fixme weights TODO: fixme assay_name character: input provided SpatialExperiment object, argument selects name assay slot input object containing preprocessed gene expression values. example, logcounts log-transformed normalized counts scran package, binomial_deviance_residuals deviance residuals scry package. Default = \"logcounts\", ignored input provided numeric matrix values. n_threads integer: Number threads parallelization. Default = 1. recommend setting equal number cores available (working laptop desktop) around 10 (working compute cluster). BPPARAM BiocParallelParam: Optional additional argument parallelization. argument provided advanced users BiocParallel flexibility parallelization operating systems. provided, instance BiocParallelParam. users, recommended option use n_threads argument instead. Default = NULL, case n_threads used instead. verbose logical: Whether display verbose output model fitting parameter estimation BRISC. Default = FALSE. ... Reserved future arguments.","code":""},{"path":"/reference/tpSVG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"input provided SpatialExperiment object, output values returned additional columns rowData slot input object. input provided numeric matrix values, output returned numeric matrix. output values include p-values without adjustment statistics reporting reporting thinplate spline model. test_stat entry returned object test statistic corresponding model, F statistics gaussian model Chi-squared statistics generalized models.","code":""},{"path":"/reference/tpSVG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"","code":"library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #>  #> Attaching package: ‘IRanges’ #> The following object is masked from ‘package:nlme’: #>  #>     collapse #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(STexampleData) #> Loading required package: ExperimentHub #> Loading required package: AnnotationHub #> Loading required package: BiocFileCache #> Loading required package: dbplyr #>  #> Attaching package: ‘AnnotationHub’ #> The following object is masked from ‘package:Biobase’: #>  #>     cache library(scran) #> Loading required package: scuttle library(nnSVG)  # load example dataset from STexampleData package spe <- Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> loading from cache  # preprocessing steps  # keep only spots over tissue spe <- spe[, colData(spe)$in_tissue == 1]  # skip spot-level quality control, since this has been performed previously # on this dataset # Add library size spe <- addPerCellQCMetrics(spe)  # filter low-expressed and mitochondrial genes spe <- filter_genes(spe) #> Gene filtering: removing mitochondrial genes #> removed 13 mitochondrial genes #> Gene filtering: retaining genes with at least 3 counts in at least 0.5% (n = 19) of spatial locations #> removed 30216 out of 33525 genes due to low expression  # calculate logcounts (log-transformed normalized counts) using scran package # using library size factors spe <- computeLibraryFactors(spe) spe <- logNormCounts(spe)    # select small number of genes for faster runtime in this example set.seed(123) ix <- sample(seq_len(nrow(spe)), 4) spe <- spe[ix, ]  # run tpSVG set.seed(123)  # Gaussian Model spe_gaus <- tpSVG(spe)  # Poisson Model spe_poisson  <- tpSVG(spe, family = poisson,  assay_name = \"counts\",  offset = log(spe$total)   # Natural log library size  ) if (FALSE) { # Negative Binomial Model # Currently buggy spe_poisson  <- tpSVG(spe, family = negbin,  assay_name = \"counts\",  offset = log(spe$total)   # Natural log library size  )  }  # show results # for more details see extended example in vignette rowData(spe_gaus) #> DataFrame with 4 rows and 6 columns #>                         gene_id   gene_name    feature_type test_stat #>                     <character> <character>     <character> <numeric> #> ENSG00000167965 ENSG00000167965       MLST8 Gene Expression   5.87018 #> ENSG00000149923 ENSG00000149923       PPP4C Gene Expression   1.01231 #> ENSG00000129562 ENSG00000129562        DAD1 Gene Expression   5.27228 #> ENSG00000114923 ENSG00000114923      SLC4A3 Gene Expression   6.34488 #>                      raw_p   runtime #>                  <numeric> <numeric> #> ENSG00000167965 0.00284902     0.285 #> ENSG00000149923 0.44164458     0.282 #> ENSG00000129562 0.00000000     0.283 #> ENSG00000114923 0.00000000     0.264"},{"path":[]},{"path":"/news/index.html","id":"tpsvg-0990","dir":"Changelog","previous_headings":"","what":"tpSVG 0.99.0","title":"tpSVG 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES main changes function foo() parameter param. BUG FIXES bug fixes. See details http://bioconductor.org/developers/package-guidelines/#news.","code":""}]
