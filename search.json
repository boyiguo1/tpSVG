[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Boyi Guo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/intro_to_tpSVG.html","id":"github","dir":"Articles","previous_headings":"Installation","what":"GitHub","title":"Introduction to `tpSVG`","text":"can install development version tpSVG GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"boyiguo1/tpSVG\")"},{"path":"/articles/intro_to_tpSVG.html","id":"bioconductor-pending","dir":"Articles","previous_headings":"Installation","what":"Bioconductor (pending)","title":"Introduction to `tpSVG`","text":"package currently submitted Bioconductor review. package accepted Bioconductor, can install latest release version tpSVG Bioconductor via following code. Additional details shown Bioconductor page. latest development version can also installed devel version Bioconductor GitHub following","code":"if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"tpSVG\") BiocManager::install(version='devel')"},{"path":"/articles/intro_to_tpSVG.html","id":"modeling-spatially-resolved-gene-expression-using-tpsvg","dir":"Articles","previous_headings":"","what":"Modeling spatially resolved gene expression using tpSVG","title":"Introduction to `tpSVG`","text":"following section, demonstrate use tpSVG SpatialExperiment object.","code":""},{"path":"/articles/intro_to_tpSVG.html","id":"load-packages","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG","what":"Load Packages","title":"Introduction to `tpSVG`","text":"run demonstration, couple necessary packages load. use data set STexampleData, contains 10x Visium dataset. Specifically, find one 10xVisium sample collected dorso lateral prefrontal region postmortem human brain STexampleData package, indexed brain number “151673” Maynard, Collado-Torres et al. (2021). information, please see vignettes STexampleData","code":"library(tpSVG) library(SpatialExperiment) library(STexampleData)          # Example data library(scuttle)                # Data preprocess"},{"path":"/articles/intro_to_tpSVG.html","id":"data-processing","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG","what":"Data processing","title":"Introduction to `tpSVG`","text":"running analysis using tpSVG, preprocess data, includes 1) calculating normalization factor, equivalently library size; 2) -sizing number genes 6 reduce running time. preprocessing step may necessary real world data analysis.","code":"spe <- Visium_humanDLPFC() spe <- spe[, colData(spe)$in_tissue == 1] spe <- logNormCounts(spe)  # Normalization factor head(spe$sizeFactor) #> AAACAAGTATCTCCCA-1 AAACAATCTACTAGCA-1 AAACACCAATAACTGC-1 AAACAGAGCGACTCCT-1  #>          1.8428941          0.3632188          0.8212187          1.1837838  #> AAACAGCTTTCAGAAG-1 AAACAGGGTCTATATT-1  #>          0.9321235          0.8724223  # Equivalently, library size spe$total <- counts(spe) |> colSums()  # Down-sizing genes for faster computation idx <- which(   rowData(spe)$gene_name %in% c(\"MOBP\", \"PCP4\", \"SNAP25\",                                 \"HBB\", \"IGKC\", \"NPY\") ) spe <- spe[idx, ]"},{"path":"/articles/intro_to_tpSVG.html","id":"modeling-raw-counts-with-poisson-model","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG","what":"Modeling raw counts with Poisson model","title":"Introduction to `tpSVG`","text":"following example demonstrates model raw gene counts data tpSVG. model fitting simple, following stats::glm syntax follow distributional assumption via argument family. key point mention model needs account technical variation due gene profiling procedure. account techincal variation, use offset term model. following example, use commonly used library size normalizing factor, hence set offset = log(spe$total) account techinical variation data. Equivalently, also possible/encouraged use offset = log(spe$sizeFactor), spe$sizeFactor calculated logNormCounts linear function library size, .e. spe$total. Note: important use log function offset making sure data scale conformable.","code":"set.seed(1) spe_poisson  <- tpSVG(   spe,   family = poisson,   assay_name = \"counts\",   offset = log(spe$total)   # Natural log library size )   rowData(spe_poisson) #> DataFrame with 6 rows and 6 columns #>                         gene_id   gene_name    feature_type test_stat     raw_p #>                     <character> <character>     <character> <numeric> <numeric> #> ENSG00000211592 ENSG00000211592        IGKC Gene Expression   3447.12         0 #> ENSG00000168314 ENSG00000168314        MOBP Gene Expression   7143.34         0 #> ENSG00000122585 ENSG00000122585         NPY Gene Expression   3596.18         0 #> ENSG00000244734 ENSG00000244734         HBB Gene Expression   1536.56         0 #> ENSG00000132639 ENSG00000132639      SNAP25 Gene Expression   3529.46         0 #> ENSG00000183036 ENSG00000183036        PCP4 Gene Expression   1381.63         0 #>                   runtime #>                 <numeric> #> ENSG00000211592     0.434 #> ENSG00000168314     0.415 #> ENSG00000122585     0.411 #> ENSG00000244734     0.407 #> ENSG00000132639     0.395 #> ENSG00000183036     0.355"},{"path":"/articles/intro_to_tpSVG.html","id":"gaussian-model-for-log-transformed-normalized-data","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG","what":"Gaussian model for log-transformed normalized data","title":"Introduction to `tpSVG`","text":"tpSVG provides flexibility regarding distributional assumption. interested, possible model log-transformed count data using Gaussian distribution.","code":"spe_gauss <- tpSVG(   spe,    family = gaussian(),   assay_name = \"logcounts\",   offset = NULL  )"},{"path":"/articles/intro_to_tpSVG.html","id":"covariate-adjusted-model","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG","what":"Covariate-adjusted Model","title":"Introduction to `tpSVG`","text":"scientifically interesting understand much additional spatial variation gene expression accounting known biology. example, known anatomy accounted model, additional spatial variation gene expression can informative unknown biology. Statistically, question known covariate adjustment, known biology quantified accounted model. address question, tpSVG allows introducing covariates model via argument X, X takes vector kind, including categorical variables. frist step remove missing data dataset, specifically covariate. can done via complete.cases.","code":"# Check missing data idx_complete_case <- complete.cases(spe$ground_truth) # If multiple covariates # idx_complete_case <- complete.cases(spe$ground_truth, spe$cell_count)  # Remove missing data spe <- spe[, idx_complete_case]  # Create a design matrix x <- spe$ground_truth   spe_poisson_cov  <- tpSVG(   spe,   X = x,    family = poisson,   assay_name = \"counts\",   offset = log(spe$total)   # Natural log library size )"},{"path":"/articles/intro_to_tpSVG.html","id":"image-based-srt-in-spatialexperiment-e-g--spatialfeatureexperiment","dir":"Articles","previous_headings":"Modeling spatially resolved gene expression using tpSVG > Covariate-adjusted Model","what":"image-based SRT in SpatialExperiment (e.g. SpatialFeatureExperiment)","title":"Introduction to `tpSVG`","text":"tpSVG can also used model image-based SRT data. use seqFISH data Lohoff Ghazanfar et al. (2020) demonstrate tpSVG. Specifically, use curated example data STexampleData package. information, please see vignettes STexampleData example data set contains 351 genes 11026 genes. make demonstration computationally feasible, -size number genes 1. average computation times 11026 cells roughly 2 minutes.","code":"library(STexampleData) spe <- seqFISH_mouseEmbryo() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> Loading required package: BumpyMatrix  spe #> class: SpatialExperiment  #> dim: 351 11026  #> metadata(0): #> assays(2): counts molecules #> rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 #> rowData names(1): gene_name #> colnames(11026): embryo1_Pos0_cell10_z2 embryo1_Pos0_cell100_z2 ... #>   embryo1_Pos28_cell97_z2 embryo1_Pos28_cell98_z2 #> colData names(14): cell_id embryo ... segmentation_vertices sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : x y #> imgData names(0): # Calculate \"library size\" spe$total <- counts(spe) |> colSums()  # Down-size genes idx_gene <- which(   rowData(spe)$gene_name %in%     c(\"Sox2\")   )  library(tpSVG)  # Poisson model tp_spe <- tpSVG(   input = spe[idx_gene,],   family = poisson(),   offset = log(spe$total),   assay_name = \"counts\")  rowData(tp_spe) #> DataFrame with 1 row and 4 columns #>        gene_name test_stat     raw_p   runtime #>      <character> <numeric> <numeric> <numeric> #> Sox2        Sox2   9588.51         0     1.323"},{"path":"/articles/intro_to_tpSVG.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to `tpSVG`","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R Under development (unstable) (2024-02-26 r85990) #>  os       Ubuntu 22.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-02-28 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version   date (UTC) lib source #>  abind                  1.4-5     2016-07-21 [1] RSPM #>  AnnotationDbi          1.65.2    2023-11-03 [1] Bioconductor #>  AnnotationHub        * 3.11.1    2023-12-11 [1] Bioconduc~ #>  beachmat               2.19.1    2024-01-22 [1] Bioconduc~ #>  Biobase              * 2.63.0    2023-10-24 [1] Bioconductor #>  BiocFileCache        * 2.11.1    2023-10-26 [1] Bioconductor #>  BiocGenerics         * 0.49.1    2023-11-01 [1] Bioconductor #>  BiocManager            1.30.22   2023-08-08 [1] RSPM #>  BiocParallel           1.37.0    2023-10-24 [1] Bioconductor #>  BiocStyle            * 2.31.0    2023-10-24 [1] Bioconductor #>  BiocVersion            3.19.1    2023-10-26 [1] Bioconductor #>  Biostrings             2.71.2    2024-01-28 [1] Bioconduc~ #>  bit                    4.0.5     2022-11-15 [1] RSPM #>  bit64                  4.0.5     2020-08-30 [1] RSPM #>  bitops                 1.0-7     2021-04-24 [1] RSPM #>  blob                   1.2.4     2023-03-17 [1] RSPM #>  bookdown               0.37      2023-12-01 [1] RSPM #>  bslib                  0.6.1     2023-11-28 [1] RSPM #>  BumpyMatrix          * 1.11.0    2023-10-24 [1] Bioconductor #>  cachem                 1.0.8     2023-05-01 [1] RSPM #>  cli                    3.6.2     2023-12-11 [1] RSPM #>  codetools              0.2-19    2023-02-01 [3] CRAN (R 4.4.0) #>  crayon                 1.5.2     2022-09-29 [1] RSPM #>  curl                   5.2.0     2023-12-08 [1] RSPM #>  DBI                    1.2.2     2024-02-16 [1] RSPM #>  dbplyr               * 2.4.0     2023-10-26 [1] RSPM #>  DelayedArray           0.29.5    2024-02-23 [1] Bioconduc~ #>  DelayedMatrixStats     1.25.1    2023-11-09 [1] Bioconductor #>  desc                   1.4.3     2023-12-10 [1] RSPM #>  digest                 0.6.34    2024-01-11 [1] RSPM #>  dplyr                  1.1.4     2023-11-17 [1] RSPM #>  evaluate               0.23      2023-11-01 [1] RSPM #>  ExperimentHub        * 2.11.1    2023-12-11 [1] Bioconduc~ #>  fansi                  1.0.6     2023-12-08 [1] RSPM #>  fastmap                1.1.1     2023-02-24 [1] RSPM #>  filelock               1.0.3     2023-12-11 [1] RSPM #>  fs                     1.6.3     2023-07-20 [1] RSPM #>  generics               0.1.3     2022-07-05 [1] RSPM #>  GenomeInfoDb         * 1.39.6    2024-02-08 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.11    2024-02-28 [1] Bioconductor #>  GenomicRanges        * 1.55.3    2024-02-13 [1] Bioconduc~ #>  glue                   1.7.0     2024-01-09 [1] RSPM #>  htmltools              0.5.7     2023-11-03 [1] RSPM #>  httr                   1.4.7     2023-08-15 [1] RSPM #>  IRanges              * 2.37.1    2024-01-19 [1] Bioconduc~ #>  jquerylib              0.1.4     2021-04-26 [1] RSPM #>  jsonlite               1.8.8     2023-12-04 [1] RSPM #>  KEGGREST               1.43.0    2023-10-24 [1] Bioconductor #>  knitr                  1.45      2023-10-30 [1] RSPM #>  lattice                0.22-5    2023-10-24 [3] CRAN (R 4.4.0) #>  lifecycle              1.0.4     2023-11-07 [1] RSPM #>  magick                 2.8.3     2024-02-18 [1] RSPM #>  magrittr               2.0.3     2022-03-30 [1] RSPM #>  Matrix                 1.6-5     2024-01-11 [3] CRAN (R 4.4.0) #>  MatrixGenerics       * 1.15.0    2023-10-24 [1] Bioconductor #>  matrixStats          * 1.2.0     2023-12-11 [1] RSPM #>  memoise                2.0.1     2021-11-26 [1] RSPM #>  mgcv                 * 1.9-1     2023-12-21 [3] CRAN (R 4.4.0) #>  mime                   0.12      2021-09-28 [1] RSPM #>  nlme                 * 3.1-164   2023-11-27 [3] CRAN (R 4.4.0) #>  pillar                 1.9.0     2023-03-22 [1] RSPM #>  pkgconfig              2.0.3     2019-09-22 [1] RSPM #>  pkgdown                2.0.7     2022-12-14 [1] any (@2.0.7) #>  png                    0.1-8     2022-11-29 [1] RSPM #>  purrr                  1.0.2     2023-08-10 [1] RSPM #>  R6                     2.5.1     2021-08-19 [1] RSPM #>  ragg                   1.2.7     2023-12-11 [1] RSPM #>  rappdirs               0.3.3     2021-01-31 [1] RSPM #>  Rcpp                   1.0.12    2024-01-09 [1] RSPM #>  RCurl                  1.98-1.14 2024-01-09 [1] RSPM #>  rjson                  0.2.21    2022-01-09 [1] RSPM #>  rlang                  1.1.3     2024-01-10 [1] RSPM #>  rmarkdown              2.25      2023-09-18 [1] RSPM #>  RSQLite                2.3.5     2024-01-21 [1] RSPM #>  S4Arrays               1.3.3     2024-01-31 [1] Bioconduc~ #>  S4Vectors            * 0.41.3    2024-01-01 [1] Bioconduc~ #>  sass                   0.4.8     2023-12-06 [1] RSPM #>  scuttle              * 1.13.0    2023-10-24 [1] Bioconductor #>  sessioninfo            1.2.2     2021-12-06 [1] any (@1.2.2) #>  SingleCellExperiment * 1.25.0    2023-10-24 [1] Bioconductor #>  SparseArray            1.3.4     2024-02-11 [1] Bioconduc~ #>  sparseMatrixStats      1.15.0    2023-10-24 [1] Bioconductor #>  SpatialExperiment    * 1.13.0    2023-10-24 [1] Bioconductor #>  STexampleData        * 1.11.0    2023-10-31 [1] Bioconductor #>  stringi                1.8.3     2023-12-11 [1] RSPM #>  stringr                1.5.1     2023-11-14 [1] RSPM #>  SummarizedExperiment * 1.33.3    2024-01-23 [1] Bioconduc~ #>  systemfonts            1.0.5     2023-10-09 [1] RSPM #>  textshaping            0.3.7     2023-10-09 [1] RSPM #>  tibble                 3.2.1     2023-03-20 [1] RSPM #>  tidyselect             1.2.0     2022-10-10 [1] RSPM #>  tpSVG                * 0.99.7    2024-02-28 [1] local #>  utf8                   1.2.4     2023-10-22 [1] RSPM #>  vctrs                  0.6.5     2023-12-01 [1] RSPM #>  withr                  3.0.0     2024-01-16 [1] RSPM #>  xfun                   0.42      2024-02-08 [1] RSPM #>  XVector                0.43.1    2024-01-10 [1] Bioconduc~ #>  yaml                   2.3.8     2023-12-11 [1] RSPM #>  zlibbioc               1.49.0    2023-10-24 [1] Bioconductor #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/devel/lib/R/site-library #>  [3] /opt/R/devel/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Boyi Guo. Author, maintainer. Lukas M. Weber. Contributor. Stephanie C. Hicks. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guo B, Hicks S (2024). tpSVG: Thin plate models detect spatially variable genes. R package version 0.99.7, https://github.com/boyiguo1/tpSVG.","code":"@Manual{,   title = {tpSVG: Thin plate models to detect spatially variable genes},   author = {Boyi Guo and Stephanie C. Hicks},   year = {2024},   note = {R package version 0.99.7},   url = {https://github.com/boyiguo1/tpSVG}, }"},{"path":"/index.html","id":"tpsvg-","dir":"","previous_headings":"","what":"Thin plate models to detect spatially variable genes ","title":"Thin plate models to detect spatially variable genes ","text":"goal tpSVG detect visualize spatial variation gene expression spatially resolved transcriptomics data analysis. Specifically, tpSVG introduces family count-based models, generalizable parametric assumptions Poisson distribution negative binomial distribution. addition, comparing crmarkdown::pandoc_version()urrently available count-based model spatially resolved data analysis, tpSVG models improves computational time, hence greatly improves applicability count-based models SRT data analysis.","code":""},{"path":[]},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Thin plate models to detect spatially variable genes ","text":"can install development version tpSVG GitHub : R version v4.4 like install tpSVG, can follow WARNING: purpose branch pre-R4.4 allow users use escheR formal release R 4.4 early stage R 4.4 release. branch update development beyond escheR v0.99.1. recommend users update R versions date.","code":"#' Install devtools package if not already installed if (required(devtools)) install.packages(package_name) devtools::install_github(\"boyiguo1/tpSVG\") if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"boyiguo1/tpSVG@pre-R4.4\")"},{"path":"/index.html","id":"bioconductor-pending","dir":"","previous_headings":"Installation","what":"Bioconductor (pending)","title":"Thin plate models to detect spatially variable genes ","text":"package currently submitted Bioconductor review. package accepted Bioconductor, can install latest release version tpSVG Bioconductor via following code. Additional details shown Bioconductor page. latest development version can also installed devel version Bioconductor GitHub following","code":"# NOTE: The package is under-review with bioconductor. #       The following code section will work once the package is accepted.  if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"tpSVG\") BiocManager::install(version = \"devel\")"},{"path":"/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Thin plate models to detect spatially variable genes ","text":"Please find end--end tutorial https://boyi-guo.com/tpSVG/articles/intro_to_tpSVG.html.","code":""},{"path":"/index.html","id":"frequently-asked-questions","dir":"","previous_headings":"","what":"Frequently asked questions","title":"Thin plate models to detect spatially variable genes ","text":"Implementation Questions data structures tpSVG current supports? tpSVG v0.99.1, data structure tpSVG supports includes SpatialExperiments (packages extending SpatialExperiments, e.g. SpatialFeatureExperiments) data.frame. Please find example via supported_data_structure. Due limited resources, regret won’t provides direct accessibility pipelines, e.g. suerat. types spatially-resolved transcriptomics (SRT) data tpSVG supports? sequenced-based SRT image-based SRT data supported tpSVG. details, please refer vignette [supported_data_structure]](https://boyi-guo.com/tpSVG/articles/supported_data_structure.html#image-based-srt--spatialexperiment-e-g--spatialfeatureexperiment). Can use scale factor offset count-model? Yes, just remember take log offset term. vignettes, offset model default library size, .e. total number molecular spot/cell, count models compatible definition scale factor theory. Theoretical Questions difference modeling log transformed data count data? Count data natural form gene expression data collected quantified. log-transformation providess shortcuts model (normalized) count data using well-studied Gaussian distribution, distorts lowly expressed gene causes analytic biases.","code":""},{"path":"/reference/tpSVG.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"Thin Plate Spline Model Detect Spatially Variable Genes","code":""},{"path":"/reference/tpSVG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"","code":"tpSVG(   input,   spatial_coords = NULL,   X = NULL,   family = poisson(),   offset = log(input$sizeFactor),   weights = NULL,   assay_name = \"counts\",   n_threads = 1,   BPPARAM = NULL,   verbose = FALSE,   ... )"},{"path":"/reference/tpSVG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"input SpatialExperiment numeric matrix: Input data, can either SpatialExperiment object numeric matrix values. SpatialExperiment object, assumed assay slot containing either logcounts (e.g. scran package) deviance residuals (e.g. scry package), spatialCoords slot containing spatial coordinates measurements. numeric matrix, values assumed already normalized transformed (e.g. logcounts), formatted rows = genes columns = spots, separate numeric matrix spatial coordinates must also provided spatial_coords argument. spatial_coords numeric matrix: Matrix containing columns spatial coordinates, formatted rows = spots. must provided input provied numeric matrix values, ignored input provided SpatialExperiment object. Default = NULL. X numeric matrix: Optional design matrix containing columns covariates per spatial location, e.g. known spatial domains. Number rows must match number spatial locations. Default = NULL, fits intercept-model. family description error distribution link function used model. Currently support two distributions poisson gaussian offset can used account technician variation family = poisson model used model raw counts. offset take log-transformed scale factor, e.g. offset = log(spe$sizeFactor), library size, normalization factor. weights Reserved future development, e.g. correcting mean-var relationship Gaussian models. Please use caution. assay_name character: input provided SpatialExperiment object, argument selects name assay slot input object containing preprocessed gene expression values. example, logcounts log-transformed normalized counts scran package, binomial_deviance_residuals deviance residuals scry package. Default = \"logcounts\", ignored input provided numeric matrix values. n_threads integer: Number threads parallelization. Default = 1. recommend setting equal number cores available (working laptop desktop) around 10 (working compute cluster). BPPARAM BiocParallelParam: Optional additional argument parallelization. argument provided advanced users BiocParallel flexibility parallelization operating systems. provided, instance BiocParallelParam. users, recommended option use n_threads argument instead. Default = NULL, case n_threads used instead. verbose logical: Whether display verbose output model fitting parameter estimation BRISC. Default = FALSE. ... Reserved future arguments.","code":""},{"path":"/reference/tpSVG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"input provided SpatialExperiment object, output values returned additional columns rowData slot input object. input provided numeric matrix values, output returned numeric matrix. output values include p-values without adjustment statistics reporting reporting thinplate spline model. test_stat entry returned object test statistic corresponding model, F statistics gaussian model Chi-squared statistics generalized models.","code":""},{"path":"/reference/tpSVG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin Plate Spline Model to Detect Spatially Variable Genes — tpSVG","text":"","code":"library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #>  #> Attaching package: ‘IRanges’ #> The following object is masked from ‘package:nlme’: #>  #>     collapse #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(STexampleData) #> Loading required package: ExperimentHub #> Loading required package: AnnotationHub #> Loading required package: BiocFileCache #> Loading required package: dbplyr #>  #> Attaching package: ‘AnnotationHub’ #> The following object is masked from ‘package:Biobase’: #>  #>     cache library(scran) #> Loading required package: scuttle library(nnSVG)  # load example dataset from STexampleData package spe <- Visium_humanDLPFC() #> see ?STexampleData and browseVignettes('STexampleData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache  # preprocessing steps  # keep only spots over tissue spe <- spe[, colData(spe)$in_tissue == 1]  # skip spot-level quality control, since this has been performed previously # on this dataset # Add library size spe <- addPerCellQCMetrics(spe)  # filter low-expressed and mitochondrial genes spe <- filter_genes(spe) #> Gene filtering: removing mitochondrial genes #> removed 13 mitochondrial genes #> Gene filtering: retaining genes with at least 3 counts in at least 0.5% (n = 19) of spatial locations #> removed 30216 out of 33525 genes due to low expression  # calculate logcounts (log-transformed normalized counts) using scran package # using library size factors spe <- computeLibraryFactors(spe) spe <- logNormCounts(spe)    # select small number of genes for faster runtime in this example set.seed(123) ix <- sample(seq_len(nrow(spe)), 4) spe <- spe[ix, ]  # run tpSVG set.seed(123)  # Gaussian Model spe_gaus <- tpSVG(  spe,  family = gaussian(),  assay_name = \"logcounts\"  )  # Poisson Model spe_poisson  <- tpSVG(  spe,  family = poisson,  assay_name = \"counts\",  offset = log(spe$sizeFactor)   # Natural log library size  )"},{"path":[]},{"path":"/news/index.html","id":"tpsvg-0990","dir":"Changelog","previous_headings":"","what":"tpSVG 0.99.0","title":"tpSVG 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES main changes function foo() parameter param. BUG FIXES bug fixes. See details http://bioconductor.org/developers/package-guidelines/#news.","code":""}]
